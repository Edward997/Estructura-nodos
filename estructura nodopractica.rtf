{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green128\blue0;\red0\green0\blue0;\red255\green0\blue0;\red128\green0\blue128;\red0\green0\blue255;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title estructura nodopractica.rtf}}

\deflang1033\pard\plain\f0\fs20 \cf0 #include <iostream>
\par #include <conio.h>
\par #include <stdlib.h>
\par \cf1\b using\b0  \b namespace\b0  std\cf2\b ;
\par 
\par \cf1 struct\b0  nodo\cf2\b \{
\par \b0\cf1 	\b int\b0  valor\cf2\b ;
\par \b0\cf1 	nodo\cf2\b *\b0\cf1  ptr\cf2\b ;
\par \b0\cf1 	
\par 	nodo\cf2\b (\cf1 int\b0  aux\cf2\b =\b0\cf3 0\cf2\b )\{
\par \b0\cf1         valor\cf2\b =\b0\cf1 aux\cf2\b ;
\par \b0\cf1         ptr\cf2\b =\b0\cf1 NULL\cf2\b ;
\par \b0\cf1     \cf2\b \}
\par \b0\cf1     
\par     \b void\b0  nuevo\cf2\b (\cf1 int\b0  aux\cf2\b )\{
\par \b0\cf1         nodo \cf2\b *\b0\cf1 actual\cf2\b =\b0\cf1 ptr\cf2\b ;
\par \b0\cf1         nodo \cf2\b *\b0\cf1 newnodo\cf2\b =\cf1 new\b0  nodo\cf2\b (\b0\cf1 aux\cf2\b );
\par \b0\cf1         \b if\cf2 (\b0\cf1 actual\cf2\b !=\b0\cf1 NULL\cf2\b )\b0\cf1  \b while\cf2 (\b0\cf1 actual\cf2\b ->\b0\cf1 ptr\cf2\b !=\b0\cf1 NULL\cf2\b )\b0\cf1  actual\cf2\b =\b0\cf1 actual\cf2\b ->\b0\cf1 ptr\cf2\b ;
\par \b0\cf1         \b if\cf2 (\b0\cf1 actual\cf2\b ==\b0\cf1 NULL\cf2\b )\b0\cf1  ptr\cf2\b =\b0\cf1 newnodo\cf2\b ;
\par \b0\cf1         \b else\b0  actual\cf2\b ->\b0\cf1 ptr\cf2\b =\b0\cf1 newnodo\cf2\b ;
\par \b0\cf1     \cf2\b \}
\par \b0\cf1     \b void\b0  mostrar\cf2\b ()\{
\par \b0\cf1         cout\cf2\b <<\b0\cf1 valor\cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1         nodo \cf2\b *\b0\cf1 actual\cf2\b =\b0\cf1 ptr\cf2\b ;
\par \b0\cf1         \b while\cf2 (\b0\cf1 actual\cf2\b !=\b0\cf1 NULL\cf2\b )\{
\par \b0\cf1             cout\cf2\b <<\b0\cf1 actual\cf2\b ->\b0\cf1 valor\cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1             actual\cf2\b =\b0\cf1 actual\cf2\b ->\b0\cf1 ptr\cf2\b ;
\par \b0\cf1         \cf2\b \}
\par \b0\cf1     \cf2\b \}
\par \b0\cf1     \cf2\b \};
\par \b0\cf1 	\b void\b0  Menu\cf2\b ()\{
\par \b0\cf1 		cout\cf2\b <<\b0\cf1  \cf4\b "Menu"\b0\cf1  \cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 		cout\cf2\b <<\cf4 "1.- Nuevo"\b0\cf1  \cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 		cout\cf2\b <<\cf4 "2.- Mostrar"\b0\cf1  \cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 		cout\cf2\b <<\cf4 "3.- Salir"\b0\cf1  \cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 		cout\cf2\b <<\cf4 "->"\cf2 ;
\par \b0\cf1 	\cf2\b \}
\par \b0\cf1 nodo l1\cf2\b (\b0\cf3 0\cf2\b );
\par 
\par \cf1 int\b0  main\cf2\b (\cf1 int\b0  argc\cf2\b ,\b0\cf1  \b char\cf2 **\b0\cf1  argv\cf2\b )\{
\par \b0\cf1 	\b int\b0  op\cf2\b ;
\par \b0\cf1 	
\par 	\b while\cf2 (\cf1 true\cf2 )\{
\par \b0\cf1 		Menu\cf2\b ();
\par \b0\cf1 		cin\cf2\b >>\b0\cf1  op\cf2\b ;
\par \b0\cf1 		
\par 		\b if\b0  \cf2\b (\b0\cf1 op\cf2\b ==\b0\cf3 1\cf2\b )\{
\par \b0\cf1 			cout\cf2\b <<\cf4 "1.- Nuevo"\b0\cf1  \cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 			\b int\b0  aux\cf2\b ;
\par \b0\cf1 			cout\cf2\b <<\b0\cf1  \cf4\b "Ingresar Dato: "\cf2 ;
\par \b0\cf1 			cin\cf2\b >>\b0\cf1  aux\cf2\b ;
\par \b0\cf1 			l1\cf2\b .\b0\cf1 nuevo\cf2\b (\b0\cf1 aux\cf2\b );
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		\b if\b0  \cf2\b (\b0\cf1 op\cf2\b ==\b0\cf3 2\cf2\b )\{
\par \b0\cf1 			cout\cf2\b <<\cf4 "2.- Mostrar"\b0\cf1  \cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 			l1\cf2\b .\b0\cf1 mostrar\cf2\b ();
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		\b if\b0  \cf2\b (\b0\cf1 op\cf2\b ==\b0\cf3 3\cf2\b )\{
\par \b0\cf1 			\b break\cf2 ;
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		\b if\b0  \cf2\b (\b0\cf1 op\cf2\b <\b0\cf3 1\cf1  \b or\b0  op\cf2\b >\b0\cf3 3\cf2\b )\{
\par \b0\cf1 			cout\cf2\b <<\cf4 "Error introduzca una opcion valida"\cf2 ;
\par \b0\cf1 			\b void\b0  Menu\cf2\b ();
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 	\cf2\b \}
\par 
\par \b0\cf1     
\par 
\par 	\b return\b0  \cf3 0\cf2\b ;
\par \}
\par }